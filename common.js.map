{"version":3,"sources":["./src/app/core/auth/guards/auth.guard.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEL;AAEK;;;;AAKpC,MAAM,SAAS;IAElB;;;;;OAKG;IACH,YACY,YAAyB,EACzB,OAAe;QADf,iBAAY,GAAZ,YAAY,CAAa;QACzB,YAAO,GAAP,OAAO,CAAQ;IAG3B,CAAC;IAED,wGAAwG;IACxG,oBAAoB;IACpB,wGAAwG;IAExG;;;;;OAKG;IACK,MAAM,CAAC,WAAW;QAEtB,kCAAkC;QAClC,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;aACpB,IAAI,CACD,gEAAS,CAAC,CAAC,aAAa,EAAE,EAAE;YAExB,sCAAsC;YACtC,IAAK,CAAC,aAAa,EACnB;gBACI,+BAA+B;gBAC/B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE,EAAC,WAAW,EAAE,EAAC,WAAW,EAAC,EAAC,CAAC,CAAC;gBAEjE,qBAAqB;gBACrB,OAAO,+CAAE,CAAC,KAAK,CAAC,CAAC;aACpB;YAED,mBAAmB;YACnB,OAAO,+CAAE,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC,CACL,CAAC;IACjB,CAAC;IAED,wGAAwG;IACxG,mBAAmB;IACnB,wGAAwG;IAExG;;;;;OAKG;IACH,WAAW,CAAC,KAA6B,EAAE,KAA0B;QAEjE,IAAI,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC;QAE5B,IAAK,WAAW,KAAK,WAAW,EAChC;YACI,WAAW,GAAG,GAAG,CAAC;SACrB;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACH,gBAAgB,CAAC,UAAkC,EAAE,KAA0B;QAE3E,IAAI,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC;QAE5B,IAAK,WAAW,KAAK,WAAW,EAChC;YACI,WAAW,GAAG,GAAG,CAAC;SACrB;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACH,OAAO,CAAC,KAAY,EAAE,QAAsB;QAExC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;;kEAjGQ,SAAS;4FAAT,SAAS,WAAT,SAAS,mBAFN,MAAM;6FAET,SAAS;cAHrB,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, Router, RouterStateSnapshot, UrlSegment, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthService } from 'src/app/core/auth/auth.service';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild, CanLoad\n{\n    /**\n     * Constructor\n     *\n     * @param {AuthService} _authService\n     * @param {Router} _router\n     */\n    constructor(\n        private _authService: AuthService,\n        private _router: Router\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Check the authenticated status\n     *\n     * @param redirectURL\n     * @private\n     */\n    private _check(redirectURL): Observable<boolean>\n    {\n        // Check the authentication status\n        return this._authService.check()\n                   .pipe(\n                       switchMap((authenticated) => {\n\n                           // If the user is not authenticated...\n                           if ( !authenticated )\n                           {\n                               // Redirect to the sign-in page\n                               this._router.navigate(['sign-in'], {queryParams: {redirectURL}});\n\n                               // Prevent the access\n                               return of(false);\n                           }\n\n                           // Allow the access\n                           return of(true);\n                       })\n                   );\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Can activate\n     *\n     * @param route\n     * @param state\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean\n    {\n        let redirectUrl = state.url;\n\n        if ( redirectUrl === '/sign-out' )\n        {\n            redirectUrl = '/';\n        }\n\n        return this._check(redirectUrl);\n    }\n\n    /**\n     * Can activate child\n     *\n     * @param childRoute\n     * @param state\n     */\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree\n    {\n        let redirectUrl = state.url;\n\n        if ( redirectUrl === '/sign-out' )\n        {\n            redirectUrl = '/';\n        }\n\n        return this._check(redirectUrl);\n    }\n\n    /**\n     * Can load\n     *\n     * @param route\n     * @param segments\n     */\n    canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean\n    {\n        return this._check('/');\n    }\n}\n"],"sourceRoot":"webpack:///"}