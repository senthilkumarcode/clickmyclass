{"version":3,"sources":["./src/app/modules/ui/select/panel-list/panel-list.component.ts","./src/app/modules/ui/select/panel-list/panel-list.component.html","./node_modules/ngx-quill/__ivy_ngcc__/fesm2015/ngx-quill.js","./src/app/modules/ui/select/select.component.ts","./src/app/modules/ui/select/select.component.html","./src/app/modules/ui/select/select.module.ts"],"names":[],"mappings":"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A,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C,mCAAmC,0DAAY;AAC/C,oCAAoC,0DAAY;AAChD,sCAAsC,0DAAY;AAClD,2BAA2B,0DAAY;AACvC,0BAA0B,0DAAY;AACtC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,6DAAe;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB,gBAAgB,wEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yCAAyC,uBAAuB;AAChE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,6DAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjmCAAmC,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,sEAAmB,GAAG,+DAAwB,CAAC,wDAAQ,GAAG,+DAAwB,CAAC,yDAAW,GAAG,+DAAwB,CAAC,uDAAgB,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,gBAAgB;AACnY,uBAAuB,+DAAwB,EAAE,iCAAiC,mnBAAmnB,YAAY,+LAA+L,aAAa,kEAA2B,GAAG;AAC37B;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,sEAAY,EAAE;AAC1B,KAAK,gCAAgC,OAAO,oDAAM,SAAS,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","file":"default~src-app-modules-admin-feedback-add-feedback-add-feedback-module~src-app-modules-admin-notifi~678706d1.js","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';\n\nimport { MatSelectionList, MatListOption} from '@angular/material/list';\n\n@Component({\n  selector: 'app-panel-list',\n  templateUrl: './panel-list.component.html',\n  styleUrls: ['./panel-list.component.scss']\n})\nexport class PanelListComponent implements OnInit {\n\n  filteredValues:any = [];\n\n\n  @Input() fieldList:any;\n  @Input() selectedItem:any;\n  @Input() fieldValue:string;\n\n  @Output() public outputParams = new EventEmitter();\n\n\n  constructor() { }\n\n  filterValues(event): void\n  {\n      // Get the value\n      const value = event.target.value.toLowerCase();\n\n      // Filter the tags\n      this.filteredValues = this.fieldList.filter(data => data[this.fieldValue].toString().toLowerCase().includes(value));\n  }\n\n  filterValuesInputKeyDown(event): void {\n      // Return, if the pressed key is not 'Enter'\n      if ( event.key !== 'Enter' )\n      {\n          return;\n      }\n\n  }\n\n  onListSelect() {\n    this.outputParams.emit({\n      selectedItem: this.selectedItem\n    });\n  }\n\n  ngOnInit(): void {\n\n    if(this.fieldList != undefined){\n      this.filteredValues = this.fieldList;\n    }\n    \n  }\n\n  ngOnChanges(changes): void {\n  }\n\n}\n","<div class=\"select-details-panel\">\n\n    <div class=\"select-panel-header\">\n\n        <div class=\"new-value\">\n            <mat-icon [svgIcon]=\"'search'\"></mat-icon>\n            <input type=\"text\"\n                   placeholder=\"Enter a value\"\n                   (input)=\"filterValues($event)\"\n                   (keydown)=\"filterValuesInputKeyDown($event)\"\n                   [maxLength]=\"50\"\n                   #newValueInput>\n        </div>\n\n    </div>\n\n    <div class=\"available-values\" *ngIf=\"filteredValues.length != 0\">\n\n        <!-- Values  -->\n        <mat-selection-list #selectionList [multiple]=\"false\" [(ngModel)]=\"selectedItem\" (selectionChange)=\"onListSelect()\">\n            <mat-list-option class=\"mat-primary\"\n            *ngFor=\"let value of filteredValues\"\n            [value]=\"value\"\n            >\n              {{value[fieldValue]}}\n            </mat-list-option>\n        </mat-selection-list>\n\n    </div>\n\n    <div class=\"no-value\" *ngIf=\"filteredValues.length == 0\">\n        <div class=\"text-secondary\">No Records</div>\n    </div>\n\n</div>\n","import { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, EventEmitter, SecurityContext, Directive, ElementRef, PLATFORM_ID, Renderer2, NgZone, Input, Output, Component, ViewEncapsulation, forwardRef, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from '@angular/common';\n\nconst _c0 = [[[\"\", \"quill-editor-toolbar\", \"\"]]];\nconst _c1 = [\"[quill-editor-toolbar]\"];\nconst defaultModules = {\n    toolbar: [\n        ['bold', 'italic', 'underline', 'strike'],\n        ['blockquote', 'code-block'],\n        [{ header: 1 }, { header: 2 }],\n        [{ list: 'ordered' }, { list: 'bullet' }],\n        [{ script: 'sub' }, { script: 'super' }],\n        [{ indent: '-1' }, { indent: '+1' }],\n        [{ direction: 'rtl' }],\n        [{ size: ['small', false, 'large', 'huge'] }],\n        [{ header: [1, 2, 3, 4, 5, 6, false] }],\n        [\n            { color: [] },\n            { background: [] }\n        ],\n        [{ font: [] }],\n        [{ align: [] }],\n        ['clean'],\n        ['link', 'image', 'video'] // link and image, video\n    ]\n};\n\nconst getFormat = (format, configFormat) => {\n    const passedFormat = format || configFormat;\n    return passedFormat || 'html';\n};\n\nconst QUILL_CONFIG_TOKEN = new InjectionToken('config');\n\nclass QuillService {\n    constructor(config) {\n        this.config = config;\n        this.count = 0;\n        if (!this.config) {\n            this.config = { modules: defaultModules };\n        }\n    }\n    getQuill() {\n        this.count++;\n        if (!this.Quill && this.count === 1) {\n            this.$importPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b;\n                const quillImport = yield import('quill');\n                this.Quill = (quillImport.default ? quillImport.default : quillImport);\n                // Only register custom options and modules once\n                (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach((customOption) => {\n                    const newCustomOption = this.Quill.import(customOption.import);\n                    newCustomOption.whitelist = customOption.whitelist;\n                    this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);\n                });\n                (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(({ implementation, path }) => {\n                    this.Quill.register(path, implementation, this.config.suppressGlobalRegisterWarning);\n                });\n                resolve(this.Quill);\n            }));\n        }\n        return this.$importPromise;\n    }\n}\nQuillService.ɵfac = function QuillService_Factory(t) { return new (t || QuillService)(ɵngcc0.ɵɵinject(QUILL_CONFIG_TOKEN)); };\nQuillService.ɵprov = ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(ɵɵinject(QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: \"root\" });\nQuillService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [QUILL_CONFIG_TOKEN]\n            }] }]; }, null); })();\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass QuillEditorBase {\n    constructor(elementRef, domSanitizer, doc, platformId, renderer, zone, service) {\n        this.elementRef = elementRef;\n        this.domSanitizer = domSanitizer;\n        this.doc = doc;\n        this.platformId = platformId;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.service = service;\n        this.required = false;\n        this.customToolbarPosition = 'top';\n        this.sanitize = false;\n        this.styles = null;\n        this.strict = true;\n        this.customOptions = [];\n        this.customModules = [];\n        this.preserveWhitespace = false;\n        this.trimOnValidation = false;\n        this.onEditorCreated = new EventEmitter();\n        this.onEditorChanged = new EventEmitter();\n        this.onContentChanged = new EventEmitter();\n        this.onSelectionChanged = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.disabled = false; // used to store initial value before ViewInit\n        this.valueGetter = (quillEditor, editorElement) => {\n            let html = editorElement.querySelector('.ql-editor').innerHTML;\n            if (html === '<p><br></p>' || html === '<div><br></div>') {\n                html = null;\n            }\n            let modelValue = html;\n            const format = getFormat(this.format, this.service.config.format);\n            if (format === 'text') {\n                modelValue = quillEditor.getText();\n            }\n            else if (format === 'object') {\n                modelValue = quillEditor.getContents();\n            }\n            else if (format === 'json') {\n                try {\n                    modelValue = JSON.stringify(quillEditor.getContents());\n                }\n                catch (e) {\n                    modelValue = quillEditor.getText();\n                }\n            }\n            return modelValue;\n        };\n        this.valueSetter = (quillEditor, value) => {\n            const format = getFormat(this.format, this.service.config.format);\n            if (format === 'html') {\n                if (this.sanitize) {\n                    value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n                }\n                return quillEditor.clipboard.convert(value);\n            }\n            else if (format === 'json') {\n                try {\n                    return JSON.parse(value);\n                }\n                catch (e) {\n                    return [{ insert: value }];\n                }\n            }\n            return value;\n        };\n        this.selectionChangeHandler = (range, oldRange, source) => {\n            const shouldTriggerOnModelTouched = !range && !!this.onModelTouched;\n            // only emit changes when there's any listener\n            if (!this.onBlur.observers.length &&\n                !this.onFocus.observers.length &&\n                !this.onSelectionChanged.observers.length &&\n                !shouldTriggerOnModelTouched) {\n                return;\n            }\n            this.zone.run(() => {\n                if (range === null) {\n                    this.onBlur.emit({\n                        editor: this.quillEditor,\n                        source\n                    });\n                }\n                else if (oldRange === null) {\n                    this.onFocus.emit({\n                        editor: this.quillEditor,\n                        source\n                    });\n                }\n                this.onSelectionChanged.emit({\n                    editor: this.quillEditor,\n                    oldRange,\n                    range,\n                    source\n                });\n                if (shouldTriggerOnModelTouched) {\n                    this.onModelTouched();\n                }\n            });\n        };\n        this.textChangeHandler = (delta, oldDelta, source) => {\n            // only emit changes emitted by user interactions\n            const text = this.quillEditor.getText();\n            const content = this.quillEditor.getContents();\n            let html = this.editorElem.querySelector('.ql-editor').innerHTML;\n            if (html === '<p><br></p>' || html === '<div><br></div>') {\n                html = null;\n            }\n            const trackChanges = this.trackChanges || this.service.config.trackChanges;\n            const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange;\n            // only emit changes when there's any listener\n            if (!this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n                return;\n            }\n            this.zone.run(() => {\n                if (shouldTriggerOnModelChange) {\n                    this.onModelChange(this.valueGetter(this.quillEditor, this.editorElem));\n                }\n                this.onContentChanged.emit({\n                    content,\n                    delta,\n                    editor: this.quillEditor,\n                    html,\n                    oldDelta,\n                    source,\n                    text\n                });\n            });\n        };\n        // eslint-disable-next-line max-len\n        this.editorChangeHandler = (event, current, old, source) => {\n            // only emit changes when there's any listener\n            if (!this.onEditorChanged.observers.length) {\n                return;\n            }\n            // only emit changes emitted by user interactions\n            if (event === 'text-change') {\n                const text = this.quillEditor.getText();\n                const content = this.quillEditor.getContents();\n                let html = this.editorElem.querySelector('.ql-editor').innerHTML;\n                if (html === '<p><br></p>' || html === '<div><br></div>') {\n                    html = null;\n                }\n                this.zone.run(() => {\n                    this.onEditorChanged.emit({\n                        content,\n                        delta: current,\n                        editor: this.quillEditor,\n                        event,\n                        html,\n                        oldDelta: old,\n                        source,\n                        text\n                    });\n                });\n            }\n            else {\n                this.onEditorChanged.emit({\n                    editor: this.quillEditor,\n                    event,\n                    oldRange: old,\n                    range: current,\n                    source\n                });\n            }\n        };\n    }\n    static normalizeClassNames(classes) {\n        const classList = classes.trim().split(' ');\n        return classList.reduce((prev, cur) => {\n            const trimmed = cur.trim();\n            if (trimmed) {\n                prev.push(trimmed);\n            }\n            return prev;\n        }, []);\n    }\n    ngAfterViewInit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (isPlatformServer(this.platformId)) {\n                return;\n            }\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            const Quill = yield this.service.getQuill();\n            this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\n            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n            const toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n            const modules = Object.assign({}, this.modules || this.service.config.modules);\n            if (toolbarElem) {\n                modules.toolbar = toolbarElem;\n            }\n            else if (modules.toolbar === undefined) {\n                modules.toolbar = defaultModules.toolbar;\n            }\n            let placeholder = this.placeholder !== undefined ? this.placeholder : this.service.config.placeholder;\n            if (placeholder === undefined) {\n                placeholder = 'Insert text here ...';\n            }\n            if (this.styles) {\n                Object.keys(this.styles).forEach((key) => {\n                    this.renderer.setStyle(this.editorElem, key, this.styles[key]);\n                });\n            }\n            if (this.classes) {\n                this.addClasses(this.classes);\n            }\n            this.customOptions.forEach((customOption) => {\n                const newCustomOption = Quill.import(customOption.import);\n                newCustomOption.whitelist = customOption.whitelist;\n                Quill.register(newCustomOption, true);\n            });\n            this.customModules.forEach(({ implementation, path }) => {\n                Quill.register(path, implementation);\n            });\n            let bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;\n            if (!bounds) {\n                bounds = this.service.config.bounds ? this.service.config.bounds : this.doc.body;\n            }\n            let debug = this.debug;\n            if (!debug && debug !== false && this.service.config.debug) {\n                debug = this.service.config.debug;\n            }\n            let readOnly = this.readOnly;\n            if (!readOnly && this.readOnly !== false) {\n                readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false;\n            }\n            let scrollingContainer = this.scrollingContainer;\n            if (!scrollingContainer && this.scrollingContainer !== null) {\n                scrollingContainer =\n                    this.service.config.scrollingContainer === null\n                        || this.service.config.scrollingContainer ? this.service.config.scrollingContainer : null;\n            }\n            let formats = this.formats;\n            if (!formats && formats === undefined) {\n                formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined);\n            }\n            this.zone.runOutsideAngular(() => {\n                this.quillEditor = new Quill(this.editorElem, {\n                    bounds,\n                    debug: debug,\n                    formats: formats,\n                    modules,\n                    placeholder,\n                    readOnly,\n                    scrollingContainer: scrollingContainer,\n                    strict: this.strict,\n                    theme: this.theme || (this.service.config.theme ? this.service.config.theme : 'snow')\n                });\n            });\n            if (this.content) {\n                const format = getFormat(this.format, this.service.config.format);\n                if (format === 'object') {\n                    this.quillEditor.setContents(this.content, 'silent');\n                }\n                else if (format === 'text') {\n                    this.quillEditor.setText(this.content, 'silent');\n                }\n                else if (format === 'json') {\n                    try {\n                        this.quillEditor.setContents(JSON.parse(this.content), 'silent');\n                    }\n                    catch (e) {\n                        this.quillEditor.setText(this.content, 'silent');\n                    }\n                }\n                else {\n                    if (this.sanitize) {\n                        this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);\n                    }\n                    const contents = this.quillEditor.clipboard.convert(this.content);\n                    this.quillEditor.setContents(contents, 'silent');\n                }\n                this.quillEditor.getModule('history').clear();\n            }\n            // initialize disabled status based on this.disabled as default value\n            this.setDisabledState();\n            // triggered if selection or text changed\n            this.quillEditor.on('editor-change', this.editorChangeHandler);\n            // mark model as touched if editor lost focus\n            this.quillEditor.on('selection-change', this.selectionChangeHandler);\n            // update model if text changes\n            this.quillEditor.on('text-change', this.textChangeHandler);\n            // trigger created in a timeout to avoid changed models after checked\n            // if you are using the editor api in created output to change the editor content\n            setTimeout(() => {\n                if (this.onValidatorChanged) {\n                    this.onValidatorChanged();\n                }\n                this.onEditorCreated.emit(this.quillEditor);\n            });\n        });\n    }\n    ngOnDestroy() {\n        if (this.quillEditor) {\n            this.quillEditor.off('selection-change', this.selectionChangeHandler);\n            this.quillEditor.off('text-change', this.textChangeHandler);\n            this.quillEditor.off('editor-change', this.editorChangeHandler);\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this.quillEditor) {\n            return;\n        }\n        /* eslint-disable @typescript-eslint/dot-notation */\n        if (changes.readOnly) {\n            this.quillEditor.enable(!changes.readOnly.currentValue);\n        }\n        if (changes.placeholder) {\n            this.quillEditor.root.dataset.placeholder =\n                changes.placeholder.currentValue;\n        }\n        if (changes.styles) {\n            const currentStyling = changes.styles.currentValue;\n            const previousStyling = changes.styles.previousValue;\n            if (previousStyling) {\n                Object.keys(previousStyling).forEach((key) => {\n                    this.renderer.removeStyle(this.editorElem, key);\n                });\n            }\n            if (currentStyling) {\n                Object.keys(currentStyling).forEach((key) => {\n                    this.renderer.setStyle(this.editorElem, key, this.styles[key]);\n                });\n            }\n        }\n        if (changes.classes) {\n            const currentClasses = changes.classes.currentValue;\n            const previousClasses = changes.classes.previousValue;\n            if (previousClasses) {\n                this.removeClasses(previousClasses);\n            }\n            if (currentClasses) {\n                this.addClasses(currentClasses);\n            }\n        }\n        /* eslint-enable @typescript-eslint/dot-notation */\n    }\n    addClasses(classList) {\n        QuillEditorBase.normalizeClassNames(classList).forEach((c) => {\n            this.renderer.addClass(this.editorElem, c);\n        });\n    }\n    removeClasses(classList) {\n        QuillEditorBase.normalizeClassNames(classList).forEach((c) => {\n            this.renderer.removeClass(this.editorElem, c);\n        });\n    }\n    writeValue(currentValue) {\n        this.content = currentValue;\n        const format = getFormat(this.format, this.service.config.format);\n        if (this.quillEditor) {\n            if (currentValue) {\n                if (format === 'text') {\n                    this.quillEditor.setText(currentValue);\n                }\n                else {\n                    this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));\n                }\n                return;\n            }\n            this.quillEditor.setText('');\n        }\n    }\n    setDisabledState(isDisabled = this.disabled) {\n        // store initial value to set appropriate disabled status after ViewInit\n        this.disabled = isDisabled;\n        if (this.quillEditor) {\n            if (isDisabled) {\n                this.quillEditor.disable();\n                this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n            }\n            else {\n                if (!this.readOnly) {\n                    this.quillEditor.enable();\n                }\n                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n            }\n        }\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    registerOnValidatorChange(fn) {\n        this.onValidatorChanged = fn;\n    }\n    validate() {\n        if (!this.quillEditor) {\n            return null;\n        }\n        const err = {};\n        let valid = true;\n        const text = this.quillEditor.getText();\n        // trim text if wanted + handle special case that an empty editor contains a new line\n        const textLength = this.trimOnValidation ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1);\n        if (this.minLength && textLength && textLength < this.minLength) {\n            err.minLengthError = {\n                given: textLength,\n                minLength: this.minLength\n            };\n            valid = false;\n        }\n        if (this.maxLength && textLength > this.maxLength) {\n            err.maxLengthError = {\n                given: textLength,\n                maxLength: this.maxLength\n            };\n            valid = false;\n        }\n        if (this.required && !textLength) {\n            err.requiredError = {\n                empty: true\n            };\n            valid = false;\n        }\n        return valid ? null : err;\n    }\n}\nQuillEditorBase.ɵfac = function QuillEditorBase_Factory(t) { return new (t || QuillEditorBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService)); };\nQuillEditorBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: QuillEditorBase, inputs: { required: \"required\", customToolbarPosition: \"customToolbarPosition\", sanitize: \"sanitize\", styles: \"styles\", strict: \"strict\", customOptions: \"customOptions\", customModules: \"customModules\", preserveWhitespace: \"preserveWhitespace\", trimOnValidation: \"trimOnValidation\", valueGetter: \"valueGetter\", valueSetter: \"valueSetter\", format: \"format\", theme: \"theme\", modules: \"modules\", debug: \"debug\", readOnly: \"readOnly\", placeholder: \"placeholder\", maxLength: \"maxLength\", minLength: \"minLength\", formats: \"formats\", scrollingContainer: \"scrollingContainer\", bounds: \"bounds\", trackChanges: \"trackChanges\", classes: \"classes\" }, outputs: { onEditorCreated: \"onEditorCreated\", onEditorChanged: \"onEditorChanged\", onContentChanged: \"onContentChanged\", onSelectionChanged: \"onSelectionChanged\", onFocus: \"onFocus\", onBlur: \"onBlur\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nQuillEditorBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: Renderer2 },\n    { type: NgZone },\n    { type: QuillService }\n];\nQuillEditorBase.propDecorators = {\n    format: [{ type: Input }],\n    theme: [{ type: Input }],\n    modules: [{ type: Input }],\n    debug: [{ type: Input }],\n    readOnly: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    maxLength: [{ type: Input }],\n    minLength: [{ type: Input }],\n    required: [{ type: Input }],\n    formats: [{ type: Input }],\n    customToolbarPosition: [{ type: Input }],\n    sanitize: [{ type: Input }],\n    styles: [{ type: Input }],\n    strict: [{ type: Input }],\n    scrollingContainer: [{ type: Input }],\n    bounds: [{ type: Input }],\n    customOptions: [{ type: Input }],\n    customModules: [{ type: Input }],\n    trackChanges: [{ type: Input }],\n    preserveWhitespace: [{ type: Input }],\n    classes: [{ type: Input }],\n    trimOnValidation: [{ type: Input }],\n    onEditorCreated: [{ type: Output }],\n    onEditorChanged: [{ type: Output }],\n    onContentChanged: [{ type: Output }],\n    onSelectionChanged: [{ type: Output }],\n    onFocus: [{ type: Output }],\n    onBlur: [{ type: Output }],\n    valueGetter: [{ type: Input }],\n    valueSetter: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillEditorBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.DomSanitizer }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: QuillService }]; }, { required: [{\n            type: Input\n        }], customToolbarPosition: [{\n            type: Input\n        }], sanitize: [{\n            type: Input\n        }], styles: [{\n            type: Input\n        }], strict: [{\n            type: Input\n        }], customOptions: [{\n            type: Input\n        }], customModules: [{\n            type: Input\n        }], preserveWhitespace: [{\n            type: Input\n        }], trimOnValidation: [{\n            type: Input\n        }], onEditorCreated: [{\n            type: Output\n        }], onEditorChanged: [{\n            type: Output\n        }], onContentChanged: [{\n            type: Output\n        }], onSelectionChanged: [{\n            type: Output\n        }], onFocus: [{\n            type: Output\n        }], onBlur: [{\n            type: Output\n        }], valueGetter: [{\n            type: Input\n        }], valueSetter: [{\n            type: Input\n        }], format: [{\n            type: Input\n        }], theme: [{\n            type: Input\n        }], modules: [{\n            type: Input\n        }], debug: [{\n            type: Input\n        }], readOnly: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], maxLength: [{\n            type: Input\n        }], minLength: [{\n            type: Input\n        }], formats: [{\n            type: Input\n        }], scrollingContainer: [{\n            type: Input\n        }], bounds: [{\n            type: Input\n        }], trackChanges: [{\n            type: Input\n        }], classes: [{\n            type: Input\n        }] }); })();\nclass QuillEditorComponent extends QuillEditorBase {\n    constructor(elementRef, domSanitizer, doc, platformId, renderer, zone, service) {\n        super(elementRef, domSanitizer, doc, platformId, renderer, zone, service);\n    }\n}\nQuillEditorComponent.ɵfac = function QuillEditorComponent_Factory(t) { return new (t || QuillEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService)); };\nQuillEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillEditorComponent, selectors: [[\"quill-editor\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                multi: true,\n                provide: NG_VALUE_ACCESSOR,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                useExisting: forwardRef(() => QuillEditorComponent)\n            },\n            {\n                multi: true,\n                provide: NG_VALIDATORS,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                useExisting: forwardRef(() => QuillEditorComponent)\n            }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, template: function QuillEditorComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2 });\nQuillEditorComponent.ctorParameters = () => [\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },\n    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },\n    { type: QuillService, decorators: [{ type: Inject, args: [QuillService,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillEditorComponent, [{\n        type: Component,\n        args: [{\n                encapsulation: ViewEncapsulation.None,\n                providers: [\n                    {\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                        useExisting: forwardRef(() => QuillEditorComponent)\n                    },\n                    {\n                        multi: true,\n                        provide: NG_VALIDATORS,\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                        useExisting: forwardRef(() => QuillEditorComponent)\n                    }\n                ],\n                selector: 'quill-editor',\n                template: `\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n`\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{\n                type: Inject,\n                args: [ElementRef]\n            }] }, { type: ɵngcc1.DomSanitizer, decorators: [{\n                type: Inject,\n                args: [DomSanitizer]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: ɵngcc0.Renderer2, decorators: [{\n                type: Inject,\n                args: [Renderer2]\n            }] }, { type: ɵngcc0.NgZone, decorators: [{\n                type: Inject,\n                args: [NgZone]\n            }] }, { type: QuillService, decorators: [{\n                type: Inject,\n                args: [QuillService]\n            }] }]; }, null); })();\n\nclass QuillViewHTMLComponent {\n    constructor(sanitizer, service) {\n        this.sanitizer = sanitizer;\n        this.service = service;\n        this.content = '';\n        this.innerHTML = '';\n        this.themeClass = 'ql-snow';\n    }\n    ngOnChanges(changes) {\n        if (changes.theme) {\n            const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow');\n            this.themeClass = `ql-${theme} ngx-quill-view-html`;\n        }\n        else if (!this.theme) {\n            const theme = this.service.config.theme ? this.service.config.theme : 'snow';\n            this.themeClass = `ql-${theme} ngx-quill-view-html`;\n        }\n        if (changes.content) {\n            this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);\n        }\n    }\n}\nQuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) { return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QuillService)); };\nQuillViewHTMLComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewHTMLComponent, selectors: [[\"quill-view-html\"]], inputs: { content: \"content\", theme: \"theme\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[1, \"ql-container\", 3, \"ngClass\"], [1, \"ql-editor\", 3, \"innerHTML\"]], template: function QuillViewHTMLComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.themeClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);\n    } }, directives: [ɵngcc2.NgClass], styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"], encapsulation: 2 });\nQuillViewHTMLComponent.ctorParameters = () => [\n    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },\n    { type: QuillService }\n];\nQuillViewHTMLComponent.propDecorators = {\n    content: [{ type: Input }],\n    theme: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewHTMLComponent, [{\n        type: Component,\n        args: [{\n                encapsulation: ViewEncapsulation.None,\n                selector: 'quill-view-html',\n                template: `\n  <div class=\"ql-container\" [ngClass]=\"themeClass\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML\">\n    </div>\n  </div>\n`,\n                styles: [`\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n`]\n            }]\n    }], function () { return [{ type: ɵngcc1.DomSanitizer, decorators: [{\n                type: Inject,\n                args: [DomSanitizer]\n            }] }, { type: QuillService }]; }, { content: [{\n            type: Input\n        }], theme: [{\n            type: Input\n        }] }); })();\n\nclass QuillViewComponent {\n    constructor(elementRef, renderer, zone, service, domSanitizer, platformId) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.service = service;\n        this.domSanitizer = domSanitizer;\n        this.platformId = platformId;\n        this.sanitize = false;\n        this.strict = true;\n        this.customModules = [];\n        this.customOptions = [];\n        this.preserveWhitespace = false;\n        this.valueSetter = (quillEditor, value) => {\n            const format = getFormat(this.format, this.service.config.format);\n            let content = value;\n            if (format === 'text') {\n                quillEditor.setText(content);\n            }\n            else {\n                if (format === 'html') {\n                    if (this.sanitize) {\n                        value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n                    }\n                    content = quillEditor.clipboard.convert(value);\n                }\n                else if (format === 'json') {\n                    try {\n                        content = JSON.parse(value);\n                    }\n                    catch (e) {\n                        content = [{ insert: value }];\n                    }\n                }\n                quillEditor.setContents(content);\n            }\n        };\n    }\n    ngOnChanges(changes) {\n        if (!this.quillEditor) {\n            return;\n        }\n        if (changes.content) {\n            this.valueSetter(this.quillEditor, changes.content.currentValue);\n        }\n    }\n    ngAfterViewInit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (isPlatformServer(this.platformId)) {\n                return;\n            }\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            const Quill = yield this.service.getQuill();\n            const modules = Object.assign({}, this.modules || this.service.config.modules);\n            modules.toolbar = false;\n            this.customOptions.forEach((customOption) => {\n                const newCustomOption = Quill.import(customOption.import);\n                newCustomOption.whitelist = customOption.whitelist;\n                Quill.register(newCustomOption, true);\n            });\n            this.customModules.forEach(({ implementation, path }) => {\n                Quill.register(path, implementation);\n            });\n            let debug = this.debug;\n            if (!debug && debug !== false && this.service.config.debug) {\n                debug = this.service.config.debug;\n            }\n            let formats = this.formats;\n            if (!formats && formats === undefined) {\n                formats = this.service.config.formats ?\n                    Object.assign({}, this.service.config.formats) : (this.service.config.formats === null ? null : undefined);\n            }\n            const theme = this.theme || (this.service.config.theme ? this.service.config.theme : 'snow');\n            this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\n            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n            this.zone.runOutsideAngular(() => {\n                this.quillEditor = new Quill(this.editorElem, {\n                    debug: debug,\n                    formats: formats,\n                    modules,\n                    readOnly: true,\n                    strict: this.strict,\n                    theme\n                });\n            });\n            this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n            if (this.content) {\n                this.valueSetter(this.quillEditor, this.content);\n            }\n        });\n    }\n}\nQuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) { return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\nQuillViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewComponent, selectors: [[\"quill-view\"]], inputs: { sanitize: \"sanitize\", strict: \"strict\", customModules: \"customModules\", customOptions: \"customOptions\", preserveWhitespace: \"preserveWhitespace\", format: \"format\", theme: \"theme\", modules: \"modules\", debug: \"debug\", formats: \"formats\", content: \"content\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function QuillViewComponent_Template(rf, ctx) { }, styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"], encapsulation: 2 });\nQuillViewComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: NgZone },\n    { type: QuillService },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nQuillViewComponent.propDecorators = {\n    format: [{ type: Input }],\n    theme: [{ type: Input }],\n    modules: [{ type: Input }],\n    debug: [{ type: Input }],\n    formats: [{ type: Input }],\n    sanitize: [{ type: Input }],\n    strict: [{ type: Input }],\n    content: [{ type: Input }],\n    customModules: [{ type: Input }],\n    customOptions: [{ type: Input }],\n    preserveWhitespace: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewComponent, [{\n        type: Component,\n        args: [{\n                encapsulation: ViewEncapsulation.None,\n                selector: 'quill-view',\n                template: `\n`,\n                styles: [`\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n`]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: QuillService }, { type: ɵngcc1.DomSanitizer }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { sanitize: [{\n            type: Input\n        }], strict: [{\n            type: Input\n        }], customModules: [{\n            type: Input\n        }], customOptions: [{\n            type: Input\n        }], preserveWhitespace: [{\n            type: Input\n        }], format: [{\n            type: Input\n        }], theme: [{\n            type: Input\n        }], modules: [{\n            type: Input\n        }], debug: [{\n            type: Input\n        }], formats: [{\n            type: Input\n        }], content: [{\n            type: Input\n        }] }); })();\n\nclass QuillModule {\n    static forRoot(config) {\n        return {\n            ngModule: QuillModule,\n            providers: [\n                {\n                    provide: QUILL_CONFIG_TOKEN,\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\nQuillModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: QuillModule });\nQuillModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function QuillModule_Factory(t) { return new (t || QuillModule)(); }, providers: [QuillService], imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuillModule, { declarations: function () { return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    QuillEditorComponent,\n                    QuillViewComponent,\n                    QuillViewHTMLComponent\n                ],\n                exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n                imports: [CommonModule],\n                providers: [QuillService]\n            }]\n    }], null, null); })();\n\n/*\n * Public API Surface of ngx-quill\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QUILL_CONFIG_TOKEN, QuillEditorBase, QuillEditorComponent, QuillModule, QuillService, QuillViewComponent, QuillViewHTMLComponent, defaultModules };\n\n//# sourceMappingURL=ngx-quill.js.map","import { Component, OnInit, Input, ViewEncapsulation, ViewChild, ElementRef, TemplateRef, ViewContainerRef, Output, EventEmitter, OnChanges } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ControlContainer, NgForm } from '@angular/forms';\n\n\n@Component({\n  selector: 'learn-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  encapsulation  : ViewEncapsulation.None,\n  viewProviders: [ { provide: ControlContainer, useExisting: NgForm } ]\n})\nexport class SelectComponent implements OnInit {\n\n  fieldName:string = \"\";\n\n  selectedItem = [];\n  selectedModel:string = \"\";\n\n  @Input() fieldRequired:string;\n  @Input() labelText:string;\n  @Input() fieldPlaceholder:string;\n  @Input() fieldList:any;\n  @Input() fieldValue:string;\n  @Input() isDisabled?:boolean;\n  @Input() fieldModel?:any;\n  @Input() fieldId:any;\n  @Input() isLabel?:any;\n  @Input() toolTip?:string;\n  @Input() isClear?:boolean = true;\n\n  @Output() public fieldParams = new EventEmitter();\n\n  // Private\n  private _selectPanelOverlayRef: OverlayRef;\n\n  @ViewChild('selectPanel')\n  private _tagsPanel: TemplateRef<any>;\n\n  constructor(\n    private _overlay: Overlay,\n    private _viewContainerRef: ViewContainerRef,\n    private _element:ElementRef\n  ) { }\n\n  isFieldRequired(){\n    return this.fieldRequired == \"required\" ? true : false;\n  }\n\n  getFieldModel(event){\n    this.fieldModel = event.selectedItem[0][this.fieldValue]\n    this.fieldParams.emit(event.selectedItem)\n    this.selectedItem = event.selectedItem;\n    this._selectPanelOverlayRef.detach();\n  }\n\n\n  isValue() {\n    return this.selectedModel != '' ? true : false\n  }\n\n  isFieldValue(){\n    return (this.selectedModel != null && this.fieldModel != undefined) ? true : false;\n  }\n\n  isTooltip(){\n    return this.toolTip != undefined ? true : false\n  }\n\n  clearSelection(){\n\n    this.selectedModel = \"\";\n\n    const newObj = Object.keys(this.selectedItem[0]).reduce(\n      (accumulator, current) => {\n        accumulator[current] = null;\n        return accumulator\n    }, {});\n\n    var selectedItem = [newObj];\n    this.selectedItem = [newObj];\n    this.fieldParams.emit(selectedItem)\n  }\n\n\n  OpenDropDown() {\n\n    // Create the overlay\n    this._selectPanelOverlayRef = this._overlay.create({\n      backdropClass   : '',\n      hasBackdrop     : true,\n      scrollStrategy  : this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n                            .flexibleConnectedTo(this._element.nativeElement)\n                            .withFlexibleDimensions()\n                            .withViewportMargin(0)\n                            .withLockedPosition()\n                            .withPositions([\n                                {\n                                    originX : 'start',\n                                    originY : 'bottom',\n                                    overlayX: 'start',\n                                    overlayY: 'top'\n                                }\n                            ])\n    });\n\n\n    // Create a portal from the template\n    const templatePortal = new TemplatePortal(this._tagsPanel, this._viewContainerRef);\n\n    // Attach the portal to the overlay\n    this._selectPanelOverlayRef.attach(templatePortal);\n\n    let cdks = document.querySelectorAll('.cdk-overlay-backdrop');\n\n    [].forEach.call(cdks, function(el, i) {\n      el.style.zIndex = parseInt(\"100000\")+i;\n      if(i==0){\n        el.style.opacity = 1\n      }\n      else {\n        el.style.opacity = 0\n      }\n    });\n\n    // Subscribe to the backdrop click\n    this._selectPanelOverlayRef.backdropClick().subscribe(() => {\n\n        // If overlay exists and attached...\n        if ( this._selectPanelOverlayRef && this._selectPanelOverlayRef.hasAttached() )\n        {\n            // Detach it\n            this._selectPanelOverlayRef.detach();\n\n        }\n\n        // If template portal exists and attached...\n        if ( templatePortal && templatePortal.isAttached )\n        {\n            // Detach it\n            templatePortal.detach();\n        }\n    });\n\n  }\n\n  camelCase(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n      return index === 0 ? word.toLowerCase() : word.toUpperCase();\n    }).replace(/\\s+/g, '');\n  }\n\n  getLabelText(text){\n    return text.replace(/[0-9]/g, '');\n  }\n\n  ngOnInit(): void {\n    this.fieldName = this.camelCase(this.labelText)\n  }\n\n  ngOnChanges(): void {\n\n    if((this.fieldModel != undefined && this.fieldModel != \"\" && this.fieldModel != null) && this.fieldList != undefined){\n      this.selectedItem = this.fieldList.filter( item => { return item[this.fieldId] == this.fieldModel } )\n      if(this.selectedItem.length != 0)\n        this.selectedModel = this.selectedItem[0][this.fieldValue]\n    }\n    else {\n      this.selectedModel = \"\"\n      this.selectedItem = [];\n    }\n\n  }\n\n\n}\n","<div class=\"select-wrapper input-box\" #selectFieldElem>\n    <label [ngClass]=\"isLabel == 'false' ? 'd-none' : ''\" for=\"{{fieldName}}\">{{getLabelText(labelText)}}<span *ngIf=\"isFieldRequired()\" class=\"ml-2 text-warn font-medium\">*</span></label>\n    <div class=\"input-wrapper\">\n        <input type=\"text\"\n\t\treadonly\n\t\tclass=\"form-control condo-select\"\n\t\tplaceholder = \"{{fieldPlaceholder}}\"\n\t\tname = \"{{fieldName}}\"\n\t\t[required]=\"isFieldRequired() ? 'required' : null\"\n        [(ngModel)]=\"selectedModel\"\n        (click)=\"OpenDropDown()\"\n        [ngClass]=\"isDisabled? 'input-disabled' : ''\"\n        autocomplete=\"off\" readonly>\n        <mat-icon class=\"close delete\" [svgIcon]=\"'close'\" *ngIf=\"isValue() && isFieldValue() && isClear\" (click)=\"clearSelection()\"></mat-icon>\n        <help-tooltip title=\"{{toolTip}}\" *ngIf=\"(!isValue() && isTooltip()) || (!isFieldValue() && isTooltip())\"></help-tooltip>\n    </div>\n</div>\n\n <!-- Tags panel -->\n <ng-template #selectPanel>\n    <app-panel-list [fieldList]=\"fieldList\"\n    [fieldValue]=\"fieldValue\"\n    [selectedItem]=\"selectedItem\"\n    (outputParams)=\"getFieldModel($event)\" ></app-panel-list>\n </ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from 'src/app/material';\nimport { SelectComponent } from './select.component';\nimport { PanelListComponent } from './panel-list/panel-list.component';\n\nimport { HelpTooltipModule } from 'src/app/modules/ui/help-tooltip/help-tooltip.module';\n\n\n@NgModule({\n  declarations: [SelectComponent, PanelListComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    HelpTooltipModule\n  ],\n  exports     : [\n    SelectComponent\n  ],\n  bootstrap: [\n    SelectComponent\n  ]\n})\nexport class SelectModule { }\n"],"sourceRoot":"webpack:///"}