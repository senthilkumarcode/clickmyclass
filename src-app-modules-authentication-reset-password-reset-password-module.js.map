{"version":3,"sources":["./src/app/modules/authentication/reset-password/reset-password.routing.ts","./src/@learn/validators/index.ts","./src/@learn/validators/public-api.ts","./src/@learn/validators/validators.ts","./src/app/modules/authentication/reset-password/reset-password.component.ts","./src/app/modules/authentication/reset-password/reset-password.component.html","./src/app/modules/authentication/reset-password/reset-password.module.ts"],"names":[],"mappings":"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","file":"src-app-modules-authentication-reset-password-reset-password-module.js","sourcesContent":["import { Route } from '@angular/router';\nimport { ResetPasswordComponent } from './reset-password.component';\n\nexport const resetPasswordRoutes: Route[] = [\n    // Redirect empty route\n    {\n        path      : '',\n        pathMatch : 'full',\n        redirectTo: 'classic'\n    },\n    // Use 'empty' layout on 'fullscreen' style\n    {\n        path     : 'fullscreen',\n        component: ResetPasswordComponent,\n        data     : {\n            layout: 'empty'\n        }\n    },\n    // Use 'empty' layout on 'fullscreen-alt' style\n    {\n        path     : 'fullscreen-alt',\n        component: ResetPasswordComponent,\n        data     : {\n            layout: 'empty'\n        }\n    },\n    // Use defaults on other styles\n    {\n        path     : '**',\n        component: ResetPasswordComponent\n    }\n];\n","export * from './public-api';\n","export * from './validators';\n","import { FormGroup, ValidatorFn } from '@angular/forms';\n\nexport class LearnValidators\n{\n    /**\n     * Check for empty (optional fields) values\n     *\n     * @param value\n     */\n    static isEmptyInputValue(value: any): boolean\n    {\n        return value == null || value.length === 0;\n    }\n\n    /**\n     * Must match validator\n     *\n     * @param controlPath A dot-delimited string values that define the path to the control.\n     * @param matchingControlPath A dot-delimited string values that define the path to the matching control.\n     */\n    static mustMatch(controlPath: string, matchingControlPath: string): ValidatorFn\n    {\n        return (formGroup: FormGroup): null => {\n\n            // Get the control and matching control\n            const control = formGroup.get(controlPath);\n            const matchingControl = formGroup.get(matchingControlPath);\n\n            // Return if control or matching control doesn't exist\n            if ( !control || !matchingControl )\n            {\n                return;\n            }\n\n            // Delete the mustMatch error to reset the error on the matching control\n            if ( matchingControl.hasError('mustMatch') )\n            {\n                delete matchingControl.errors.mustMatch;\n                matchingControl.updateValueAndValidity();\n            }\n\n            // Don't validate empty values on the matching control\n            // Don't validate if values are matching\n            if ( this.isEmptyInputValue(matchingControl.value) || control.value === matchingControl.value )\n            {\n                return;\n            }\n\n            // Set the validation error on the matching control\n            matchingControl.setErrors({mustMatch: true});\n        };\n    }\n}\n","import { Component, OnDestroy, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { LearnAnimations } from 'src/@learn/animations';\nimport { LearnValidators } from 'src/@learn/validators';\n\n@Component({\n    selector     : 'reset-password',\n    templateUrl  : './reset-password.component.html',\n    styleUrls    : ['./reset-password.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : LearnAnimations\n})\nexport class ResetPasswordComponent implements OnInit, OnDestroy\n{\n    cardStyle: string;\n    message: any;\n    resetPasswordForm: FormGroup;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ActivatedRoute} _activatedRoute\n     * @param {FormBuilder} _formBuilder\n     * @param {Router} _router\n     */\n    constructor(\n        @Inject(DOCUMENT) private _document: any,\n        private _activatedRoute: ActivatedRoute,\n        private _formBuilder: FormBuilder,\n        private _router: Router\n    )\n    {\n        // Set the defaults\n        this.message = null;\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n\n      document.querySelector('body').className = '';\n      this._document.body.classList.add('learn-splash-screen-hidden');\n      this._document.body.classList.add('learn-theme-light');\n\n      // Create the form\n        this.resetPasswordForm = this._formBuilder.group({\n                password       : ['', Validators.required],\n                passwordConfirm: ['', Validators.required]\n            },\n            {\n                validators: LearnValidators.mustMatch('password', 'passwordConfirm')\n            }\n        );\n\n        // Set the card style for the first time\n        this._setCardStyle();\n\n        // Register to the NavigationEnd event\n        this._router.events\n            .pipe(filter((event) => event instanceof NavigationEnd))\n            .subscribe(() => {\n\n                // Set the card style\n                this._setCardStyle();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Set the card style from the url\n     * Demonstration purposes only!\n     *\n     * @private\n     */\n    private _setCardStyle(): void\n    {\n        // Get the current route\n        let route = this._activatedRoute;\n        while ( route.firstChild )\n        {\n            route = route.firstChild;\n        }\n\n        // Set the card style from the path\n        this.cardStyle = route.snapshot.url[0].path;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Reset password\n     */\n    resetPassword(): void\n    {\n        // Do nothing if the form is invalid\n        if ( this.resetPasswordForm.invalid )\n        {\n            return;\n        }\n\n        // Disable the form\n        this.resetPasswordForm.disable();\n\n        // Hide the message\n        this.message = null;\n\n        // Do your action here...\n\n        // Emulate server delay\n        setTimeout(() => {\n\n            // Re-enable the form\n            this.resetPasswordForm.enable();\n\n            // Reset the form\n            this.resetPasswordForm.reset({});\n\n            // Show the message\n            this.message = {\n                appearance: 'outline',\n                content   : 'Your password has been reset.',\n                shake     : false,\n                showIcon  : false,\n                type      : 'success'\n            };\n        }, 1000);\n    }\n}\n","<div class=\"content-layout fullwidth-basic-normal-scroll\">\n\n    <learn-card class=\"auth-card\">\n\n        <!-- Form container -->\n        <div class=\"form-container p-5\">\n\n            <div class=\"form\">\n\n                 <!-- Logo -->\n             <div class=\"logo\">\n              <img class=\"img-fluid\" src=\"assets/images/logo-cmc.svg\">\n            </div>\n\n                <!-- Title -->\n                <h2 class=\"title font-bold\">Reset your password</h2>\n                <h6 class=\"subtitle font-medium text-secondary\">Create a new password for your account</h6>\n\n                <!-- Message -->\n                <learn-message *ngIf=\"message\"\n                             [appearance]=\"message.appearance\"\n                             [showIcon]=\"message.showIcon\"\n                             [type]=\"message.type\"\n                             [@shake]=\"message.shake\">\n                    {{message.content}}\n                </learn-message>\n\n                <!-- Reset password form -->\n                <form [formGroup]=\"resetPasswordForm\">\n\n                    <!-- Password field -->\n                    <mat-form-field>\n                        <mat-label>Password</mat-label>\n                        <input id=\"password\"\n                               matInput\n                               type=\"password\"\n                               [formControlName]=\"'password'\"\n                               #passwordField>\n                        <button mat-icon-button\n                                type=\"button\"\n                                (click)=\"passwordField.type === 'password' ? passwordField.type = 'text' : passwordField.type = 'password'\"\n                                matSuffix>\n                            <mat-icon *ngIf=\"passwordField.type === 'password'\"\n                                      [svgIcon]=\"'visibility'\"></mat-icon>\n                            <mat-icon *ngIf=\"passwordField.type === 'text'\"\n                                      [svgIcon]=\"'visibility_off'\"></mat-icon>\n                        </button>\n                        <mat-error>\n                            Password is required\n                        </mat-error>\n                    </mat-form-field>\n\n                    <!-- Password confirm field -->\n                    <mat-form-field>\n                        <mat-label>Password (Confirm)</mat-label>\n                        <input id=\"password-confirm\"\n                               matInput\n                               type=\"password\"\n                               [formControlName]=\"'passwordConfirm'\"\n                               #passwordConfirmField>\n                        <button mat-icon-button\n                                type=\"button\"\n                                (click)=\"passwordConfirmField.type === 'password' ? passwordConfirmField.type = 'text' : passwordConfirmField.type = 'password'\"\n                                matSuffix>\n                            <mat-icon *ngIf=\"passwordConfirmField.type === 'password'\"\n                                      [svgIcon]=\"'visibility'\"></mat-icon>\n                            <mat-icon *ngIf=\"passwordConfirmField.type === 'text'\"\n                                      [svgIcon]=\"'visibility_off'\"></mat-icon>\n                        </button>\n                        <mat-error *ngIf=\"resetPasswordForm.get('passwordConfirm').hasError('required')\">\n                            Password confirmation is required\n                        </mat-error>\n                        <mat-error *ngIf=\"resetPasswordForm.get('passwordConfirm').hasError('mustMatch')\">\n                            Passwords must match\n                        </mat-error>\n                    </mat-form-field>\n\n                    <!-- Submit button -->\n                    <button class=\"submit-button learn-mat-button-large\"\n                            mat-flat-button\n                            type=\"button\"\n                            [color]=\"'primary'\"\n                            [disabled]=\"resetPasswordForm.disabled\"\n                            (click)=\"resetPassword()\">\n                        <span *ngIf=\"!resetPasswordForm.disabled\">\n                            Reset your password\n                        </span>\n                        <mat-progress-spinner *ngIf=\"resetPasswordForm.disabled\"\n                                              [diameter]=\"24\"\n                                              [mode]=\"'indeterminate'\"></mat-progress-spinner>\n                    </button>\n\n                    <!-- Form footer -->\n                    <div class=\"form-footer\">\n                        <span>Return to</span>\n                        <a class=\"link\"\n                           [routerLink]=\"['/login']\">login</a>\n                    </div>\n\n                </form>\n\n            </div>\n\n        </div>\n\n    </learn-card>\n\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { LearnCardModule } from 'src/@learn/components/card/card.module';\nimport { LearnMessageModule } from 'src/app/modules/ui/message/message.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { resetPasswordRoutes } from './reset-password.routing';\n\n@NgModule({\n    declarations: [\n        ResetPasswordComponent\n    ],\n    imports     : [\n        CommonModule,\n        RouterModule.forChild(resetPasswordRoutes),\n        LearnCardModule,\n        LearnMessageModule,\n        SharedModule.forRoot()\n    ]\n})\nexport class ResetPasswordModule\n{\n}\n"],"sourceRoot":"webpack:///"}